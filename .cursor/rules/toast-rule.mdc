---
description: 
globs: 
alwaysApply: true
---
# Richtlinien f√ºr Toast-Benachrichtigungen

## 1. Zweck von Toasts

Toasts dienen dazu, kurze, nicht-intrusive Benachrichtigungen an den Benutzer zu √ºbermitteln. Sie sollten f√ºr Feedback zu Aktionen oder f√ºr Systemereignisse verwendet werden, die keine sofortige Interaktion erfordern und nach kurzer Zeit von selbst verschwinden k√∂nnen.

## 2. Wann Toasts verwenden?

*   **Direktes Feedback auf Benutzeraktionen:**
    *   "Einstellungen erfolgreich gespeichert."
    *   "Profil gestartet." / "Startvorgang abgebrochen."
    *   "Datei erfolgreich gel√∂scht."
    *   "Mod heruntergeladen und aktiviert."
*   **System- und Hintergrundereignisse:**
    *   "Download abgeschlossen."
    *   "Ein neues Update ist verf√ºgbar." (ggf. mit Aktionsbutton)
    *   "Verbindung zum Server verloren." (als kurze Info)
*   **Kurze Fehler- oder Warnmeldungen:**
    *   "Eingabe ung√ºltig. Bitte √ºberpr√ºfe das Format." (wenn der Fehler direkt im Kontext des Toasts klar ist)
    *   "Netzwerkfehler beim Abrufen der News."
*   **Status von asynchronen Operationen (Promise Toasts):**
    *   Anzeige von `loading`, `success` und `error` Zust√§nden f√ºr Hintergrundprozesse.
    *   Beispiel: Mod-Download, Profil-Import/-Export.

## 3. Wann KEINE Toasts verwenden?

*   **Kritische Fehler:** F√ºr Fehler, die eine sofortige Benutzeraktion erfordern oder wichtige Informationen enthalten, die nicht √ºbersehen werden d√ºrfen (z.B. Datenverlustwarnungen), sollten Modals oder dedizierte UI-Elemente verwendet werden.
*   **Lange Nachrichten oder komplexe Informationen:** Toasts sind f√ºr K√ºrze gedacht.
*   **Formulare oder Dateneingaben:** Toasts sind nicht f√ºr Eingaben gedacht.
*   **Als prim√§res Navigationselement.**

## 4. Implementierung und Ort

*   **Globaler Toaster:** Die Toast-Konfiguration und das Standard-Styling sind in `src/components/ui/GlobalToaster.tsx` zentralisiert.
*   **Verf√ºgbarkeit:**
    *   In der Hauptanwendung (`App.tsx`) ist `<GlobalToaster />` eingebunden.
    *   F√ºr das Log-Fenster (`logWindowEntry.tsx`) kann `<GlobalToaster />` ebenfalls hinzugef√ºgt werden, um dort Toasts zu erm√∂glichen.
*   **Aufruf:** Toasts k√∂nnen von jeder React-Komponente aus durch Import und Aufruf der `toast`-Funktionen von `react-hot-toast` ausgel√∂st werden.

## 5. Wie Toasts verwenden?

### 5.1. Import

```typescript
import { toast } from 'react-hot-toast';
```

### 5.2. Basis-Typen

*   **Standard-Toast (dynamische Akzentfarbe):**
    ```typescript
    toast("Dies ist eine Standardnachricht.");
    ```
*   **Erfolgs-Toast:**
    ```typescript
    toast.success("Aktion erfolgreich abgeschlossen!");
    ```
*   **Fehler-Toast:**
    ```typescript
    toast.error("Ein Fehler ist aufgetreten.");
    ```
*   **Mehrzeiliger Toast:**
    ```typescript
    toast("Dies ist die erste Zeile.\\nUnd hier folgt die zweite Zeile.");
    ```
*   **Promise-basierter Toast:**
    ```typescript
    const myPromise = /* ...deine Promise-Logik... */;
    toast.promise(myPromise, {
      loading: 'Wird geladen...',
      success: (data) => `Erfolgreich: ${data}`, // data ist der resolve-Wert des Promises
      error: (err) => {
        const message = err instanceof Error ? err.message : String(err.message);
        return `Failed: ${message}`;
      },
    });
    ```

### 5.3. Benutzerdefinierter JSX-Inhalt (f√ºr Aktionen, Icons etc.)

F√ºr komplexere Toasts, z.B. mit Buttons oder spezifischen Icons:

```typescript
toast((t) => ( // 't' ist das Toast-Objekt mit Infos wie t.id
  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>
    <span>M√∂chtest du diese Aktion wirklich durchf√ºhren?</span>
    <div>
      <button
        onClick={() => {
          // Deine Aktion hier
          toast.dismiss(t.id); // Schlie√üt diesen spezifischen Toast
        }}
        style={{ marginRight: '8px' /* ... weitere Styles ... */ }}
      >
        Best√§tigen
      </button>
      <button onClick={() => toast.dismiss(t.id)} style={ { /* ... */ } }>
        Abbrechen
      </button>
    </div>
  </span>
));
```

### 5.4. Styling und Erscheinungsbild

*   **Globales Styling:** Definiert in `src/components/ui/GlobalToaster.tsx` via `toastOptions`.
    *   **Schriftart:** `font-minecraft`
    *   **Text-Transformation:** `uppercase`
    *   **Ecken:** Eckig (`borderRadius: '0px'`)
    *   **Position:** Unten rechts (`bottom-right`)
    *   **Mindestbreite:** `290px`
    *   **Farben:**
        *   Standard-Toasts verwenden dynamisch die Akzentfarbe des Themes (`--accent`, `--accent-rgb`).
        *   Success- und Error-Toasts haben spezifische, an das `Label.tsx`-Design angelehnte Farben.
    *   **Schatten & Rahmen:** Angelehnt an `Label.tsx`.
*   **Individuelles Styling:** Kann pro Toast beim Aufruf mitgegeben werden, wird aber f√ºr Konsistenz seltener ben√∂tigt.
    ```typescript
    toast("Besonderer Toast!", {
      icon: 'üéâ',
      style: {
        border: '1px solid #713200',
        padding: '16px',
        color: '#713200',
      },
    });
    ```

### 5.5. Verhalten und Schlie√üen

*   **Automatisches Schlie√üen:** Toasts verschwinden nach einer Standarddauer (ca. 5 Sekunden f√ºr Standard, l√§nger f√ºr Error).
*   **Pause bei Hover:** Die Zeit bis zum automatischen Schlie√üen pausiert, wenn sich der Mauszeiger √ºber dem Toast befindet (`pauseOnHover: true` ist Standard).
*   **Programmatisches Schlie√üen:**
    *   Einen spezifischen Toast schlie√üen: `toast.dismiss(toastId);` (Die `toastId` erh√§lt man z.B. als R√ºckgabewert von `toast()` oder im `t`-Objekt bei benutzerdefiniertem JSX).
    *   Alle Toasts schlie√üen: `toast.dismiss();`
*   **Expliziter Schlie√üen-Button:** Kann √ºber benutzerdefiniertes JSX hinzugef√ºgt werden (siehe Beispiel in 5.3 oder `PlayTab.tsx` Test-Button).
    *   Derzeit werden Toasts **NICHT** durch einen Klick auf den gesamten Toast-Body geschlossen. Diese Funktion wurde zugunsten der Klarheit und m√∂glicher versehentlicher Klicks wieder entfernt.

## 6. Wichtige Prinzipien

*   **Pr√§gnanz:** Halte Toast-Nachrichten kurz und auf den Punkt.
*   **Relevanz:** Zeige nur Toasts an, die f√ºr den aktuellen Kontext des Benutzers n√ºtzlich sind.
*   **Aktion (wenn sinnvoll):** Wenn ein Toast eine Folgeaktion nahelegt (z.B. "Details anzeigen", "R√ºckg√§ngig"), erw√§ge, einen Button hinzuzuf√ºgen.
*   **Nicht √ºberladen:** Zu viele Toasts in kurzer Zeit k√∂nnen st√∂rend wirken.

## 7. Referenz

Die prim√§re Konfigurationsdatei f√ºr das globale Toast-Verhalten und -Aussehen ist:
`src/components/ui/GlobalToaster.tsx`

